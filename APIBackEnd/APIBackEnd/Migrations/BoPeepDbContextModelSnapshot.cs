// <auto-generated />
using APIBackEnd.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace APIBackEnd.Migrations
{
    [DbContext(typeof(BoPeepDbContext))]
    partial class BoPeepDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("APIBackEnd.Models.Activities", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Location")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "A nice stroll outside to enjoy nature and fresh air",
                            ExternalLink = "https://www.wta.org/?gclid=CjwKCAjwvtX0BRAFEiwAGWJyZJMy_TIYVTxTlNY1u8DtYnwh-hfOyaf4tLByYfEdTrqNR2JbN8hk5xoC2-4QAvD_BwE",
                            ImageUrl = "https://photos.app.goo.gl/VwiATQcEmoGkmjNb9",
                            Location = 0,
                            Rate = 1,
                            Rating = 4.5,
                            Title = "Hike/trails"
                        },
                        new
                        {
                            ID = 2,
                            Description = "A chance to enjoy nature without movement, also good to enjoy with your cat",
                            ExternalLink = "https://www.seattleaudubon.org/sas/getinvolved/gobirding.aspx",
                            ImageUrl = "https://photos.app.goo.gl/KKhASik7AVioTz9r9",
                            Location = 1,
                            Rate = 1,
                            Rating = 4.5,
                            Title = "Bird watching"
                        },
                        new
                        {
                            ID = 3,
                            Description = "Better than a hike! You've got companion to help you stop and smell the roses",
                            ExternalLink = "N/A",
                            ImageUrl = "https://photos.app.goo.gl/xoRc7LsaQn9JXEfA9",
                            Location = 0,
                            Rate = 1,
                            Rating = 4.5,
                            Title = "Dog/cat walking"
                        },
                        new
                        {
                            ID = 4,
                            Description = "grow veggies, flowers and fruit",
                            ExternalLink = "N/A",
                            ImageUrl = "https://photos.app.goo.gl/cknW2GGkCC9hKNwx6",
                            Location = 0,
                            Rate = 1,
                            Rating = 4.5,
                            Title = "Gardening"
                        },
                        new
                        {
                            ID = 5,
                            Description = "Get a nice bite to eat, for free!",
                            ExternalLink = "N/A",
                            ImageUrl = "https://photos.app.goo.gl/kmLEkS6xmE3q6VSr5",
                            Location = 0,
                            Rate = 1,
                            Rating = 4.5,
                            Title = "Dumpster Diving"
                        },
                        new
                        {
                            ID = 6,
                            Description = "Time to slay dragons and drink mead",
                            ExternalLink = "N/A",
                            ImageUrl = "https://photos.app.goo.gl/c1145jDRGZJChSkT8",
                            Location = 0,
                            Rate = 1,
                            Rating = 4.5,
                            Title = "Games"
                        },
                        new
                        {
                            ID = 7,
                            Description = "Blood pumping and brain working",
                            ExternalLink = "N/A",
                            ImageUrl = "https://photos.app.goo.gl/fExYrBfPvsroKzfs6",
                            Location = 0,
                            Rate = 1,
                            Rating = 4.5,
                            Title = "Exercise"
                        },
                        new
                        {
                            ID = 8,
                            Description = "Art, cooking or C#, the options are endless",
                            ExternalLink = "N/A",
                            ImageUrl = "https://photos.app.goo.gl/FENqHw19himsaDEZ9",
                            Location = 0,
                            Rate = 1,
                            Rating = 4.5,
                            Title = "Learning"
                        },
                        new
                        {
                            ID = 9,
                            Description = "Aloe, succulents and anything else your cat won't eat",
                            ExternalLink = "http://serpadesign.com/",
                            ImageUrl = "https://photos.app.goo.gl/hTKgacuUNjegWq2u9",
                            Location = 0,
                            Rate = 1,
                            Rating = 4.5,
                            Title = "Terrariums"
                        },
                        new
                        {
                            ID = 10,
                            Description = "be social while social distancing",
                            ExternalLink = "N/A",
                            ImageUrl = "https://photos.app.goo.gl/cQYoMM3UHax4i9g2A",
                            Location = 0,
                            Rate = 1,
                            Rating = 4.5,
                            Title = "Facetime/video calls"
                        });
                });

            modelBuilder.Entity("APIBackEnd.Models.ActivitiesReviews", b =>
                {
                    b.Property<int>("ReviewsID")
                        .HasColumnType("int");

                    b.Property<int>("ActivitiesID")
                        .HasColumnType("int");

                    b.HasKey("ReviewsID", "ActivitiesID");

                    b.HasIndex("ActivitiesID");

                    b.ToTable("ActivitiesReviews");
                });

            modelBuilder.Entity("APIBackEnd.Models.Reviews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("APIBackEnd.Models.Tag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Names")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Tag");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Names = "Flora/fauna"
                        },
                        new
                        {
                            ID = 2,
                            Names = "Exercise"
                        },
                        new
                        {
                            ID = 3,
                            Names = "Games"
                        },
                        new
                        {
                            ID = 4,
                            Names = "Social"
                        },
                        new
                        {
                            ID = 5,
                            Names = "Pets"
                        },
                        new
                        {
                            ID = 6,
                            Names = "Arts&Crafts"
                        },
                        new
                        {
                            ID = 7,
                            Names = "Self care"
                        },
                        new
                        {
                            ID = 8,
                            Names = "Online"
                        },
                        new
                        {
                            ID = 9,
                            Names = "Productive"
                        },
                        new
                        {
                            ID = 10,
                            Names = "Baking/Cooking"
                        });
                });

            modelBuilder.Entity("APIBackEnd.Models.TagActivity", b =>
                {
                    b.Property<int>("ActivitiesId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ActivitiesId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TagActivity");
                });

            modelBuilder.Entity("APIBackEnd.Models.ActivitiesReviews", b =>
                {
                    b.HasOne("APIBackEnd.Models.Activities", "Activities")
                        .WithMany()
                        .HasForeignKey("ActivitiesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIBackEnd.Models.Reviews", "Reviews")
                        .WithMany()
                        .HasForeignKey("ReviewsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("APIBackEnd.Models.TagActivity", b =>
                {
                    b.HasOne("APIBackEnd.Models.Activities", "Activities")
                        .WithMany()
                        .HasForeignKey("ActivitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIBackEnd.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
